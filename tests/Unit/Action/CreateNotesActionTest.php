<?php

namespace Tests\Feature;

use App\Models\Note;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Mockery\Mock;
use Notes\Notes\Actions\CreateNotesAction;
use Notes\Notes\Repositories\Contracts\NoteRepositoryInterface;
use Notes\Notes\Repositories\NoteRepository;
use Tests\TestCase;

class CreateNotesActionTest extends TestCase
{
   private $noteRepository;

    public function setUp(): void
    {
        parent::setUp();

        $this->noteRepository = \Mockery::mock(NoteRepositoryInterface::class);
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        \Mockery::close();
    }

    public function test_create_note()
    {
        $data = [
            'title' => 'Titulo 1',
            'content' => 'Contenido',
            'user_id' => '1'
        ];

        $this->noteRepository->shouldReceive('create')
            ->with($data)
            ->andReturn(Note::class);

        $action = new CreateNotesAction($this->noteRepository);

        $result = $action->make($data);

        $this->assertEquals(true, $result);
    }

    public function test_create_failed_note()
    {
        $data = [
            'content' => 'Contenido',
            'user_id' => '1'
        ];

        $this->noteRepository->shouldReceive('create')
            ->with($data)
            ->andReturn(Note::class);

        $action = new CreateNotesAction($this->noteRepository);

        $result = $action->make($data);

        $this->assertEquals(false, $result);
    }
}
